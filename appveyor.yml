
#---------------------------------#
#      general configuration      #
#---------------------------------#

version:  1.0.{build}-{branch}



# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - git config --global core.autocrlf input

# clone directory
clone_folder: c:\projects\myproject

# fetch repository as zip archive
shallow_clone: false                 # default is "false"

# set clone depth
clone_depth: 5                      # clone entire repository history if not defined


# build cache to preserve files/folders between builds
cache:
  - packages -> **\packages.config  # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
  - projectA\libs
  - node_modules                    # local npm modules
  - '%LocalAppData%\NuGet\Cache'    # NuGet < v3
  - '%LocalAppData%\NuGet\v3-cache' # NuGet v3

# enable service required for build/tests
services:
  - mssql2016           # start SQL Server 2016 Developer
  - mysql               # start MySQL 5.6 service
  - postgresql          # start PostgreSQL 9.5 service
  - iis                 # start IIS

# scripts that run after cloning repository
install:
  # Update submodules
  - cmd: git submodule update --init --recursive
  - cmd: set PATH=%PATH%;C:\Miniconda3-x64;C:\Miniconda3-x64\Scripts
  - cmd: conda create -q -y -n py35 python=3.5
  - cmd: call activate py35
  - cmd: conda install -q -y cmake pytest cython ninja pytest-cov
  - cmd: python -m pip install --upgrade pip
  - cmd: conda install -q -y -c conda-forge distro
  - cmd: call deactivate
  - cmd: curl -fsS -o sqliteodbc_w64.exe http://www.ch-werner.de/sqliteodbc/sqliteodbc_w64.exe
  - cmd: sqliteodbc_w64.exe /S
  - cmd: curl -fsS -o psqlodbc_10_03_0000-x64.zip https://ftp.postgresql.org/pub/odbc/versions/msi/psqlodbc_10_03_0000-x64.zip
  - cmd: 7z.exe x psqlodbc_10_03_0000-x64.zip
  - cmd: msiexec /i psqlodbc_x64.msi /qn /norestart


#---------------------------------#
#       build configuration       #
#---------------------------------#

# scripts to run before build
before_build:
  - cmd: choco install -y codecov
  - cmd: refreshenv
  - cmd: set PATH=%PATH%;C:\Miniconda3-x64;C:\Miniconda3-x64\Scripts
  - cmd: call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x64
  - cmd: call activate py35

# to run your custom scripts instead of automatic MSBuild
build_script:
# Build Coverage Enabled version of Cyanodbc
  - cmd: cd c:\projects\myproject
  - cmd: mkdir build
  - cmd: cd build
  - cmd: cmake -G Ninja -DNANODBC_ODBC_VERSION=SQL_OV_ODBC3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%USERPROFILE%  -DCYANODBC_TARGET_PYTHON=3.5 -DCYANODBC_ENABLE_COVERAGE=ON ..
  - cmd: cmake --build .
# Build Production Version
  - cmd: cd c:\projects\myproject
  - cmd: mkdir buildprod
  - cmd: cd buildprod
  - cmd: cmake -G Ninja -DNANODBC_ODBC_VERSION=SQL_OV_ODBC3 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%USERPROFILE%  -DCYANODBC_TARGET_PYTHON=3.5 -DCYANODBC_ENABLE_COVERAGE=OFF ..
  - cmd: cmake --build .
  - cmd: cd src\cython
  - cmd: python setup.py bdist_wheel --plat-name win_amd64

# scripts to run after build (working directory and environment changes are persisted from the previous steps)
after_build:

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

# scripts to run before tests (working directory and environment changes are persisted from the previous steps such as "before_build")
before_test:

  - cd C:\projects\myproject

#  - pip install C:\projects\myproject\build\src\python\dist\Cyanodbc-0.0.1-py3-none-any.whl


# to run your custom scripts instead of automatic tests
test_script:
# Generate coverage.xml
  - pip install -e c:\projects\myproject\build\src\cython
  - pytest -v --cov=cyanodbc tests --cov-report=xml
  - pip uninstall -y cyanodbc
# Verify that the built production pacakge works
  - ps: |
      $cmd = "pip install " + (get-item C:\projects\myproject\buildprod\src\cython\dist\Cyanodbc*.whl).FullName
      iex "& $cmd"

# scripts to run after tests
after_test:
  - codecov -f coverage.xml


# to disable automatic tests
#test: off


#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

artifacts:

  # pushing a single file
  - path: buildprod\src\cython\dist\*.whl




  #   # Deploy to GitHub Releases
  # - provider: GitHub
  #   artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
  #   draft: false
  #   prerelease: false
  #   on:
  #     branch: master                # release from master branch only
  #     appveyor_repo_tag: true       # deploy on tag push only


# scripts to run before deployment
before_deploy:

# scripts to run after deployment
after_deploy:

# to run your custom scripts instead of provider deployments
deploy_script:

# to disable deployment
#deploy: off


